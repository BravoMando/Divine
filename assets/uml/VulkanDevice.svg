<?xml version="1.0" encoding="us-ascii" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1372px" preserveAspectRatio="none" style="width:901px;height:1372px;background:#FFFFFF;" version="1.1" viewBox="0 0 901 1372" width="901px" zoomAndPan="magnify"><defs/><g><!--class VulkanDevice--><g id="elem_VulkanDevice"><rect codeLine="2" fill="#F1F1F1" height="1351.0938" id="VulkanDevice" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="880" x="7" y="7"/><ellipse cx="399.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M402.5156,18.875 Q402.6719,18.6563 402.8594,18.5469 Q403.0469,18.4375 403.2656,18.4375 Q403.6406,18.4375 403.875,18.7031 Q404.1094,18.9531 404.1094,19.5625 L404.1094,21.0156 Q404.1094,21.625 403.875,21.8906 Q403.6406,22.1563 403.2656,22.1563 Q402.9219,22.1563 402.7188,21.9531 Q402.5156,21.7656 402.4063,21.25 Q402.3594,20.8906 402.1719,20.7031 Q401.8438,20.3281 401.2344,20.1094 Q400.625,19.8906 400,19.8906 Q399.2344,19.8906 398.5938,20.2188 Q397.9688,20.5469 397.4688,21.2969 Q396.9844,22.0469 396.9844,23.0781 L396.9844,24.1719 Q396.9844,25.4063 397.875,26.2344 Q398.7656,27.0469 400.3594,27.0469 Q401.2969,27.0469 401.9531,26.7969 Q402.3438,26.6406 402.7656,26.2031 Q403.0313,25.9375 403.1719,25.8594 Q403.3281,25.7813 403.5313,25.7813 Q403.8594,25.7813 404.1094,26.0469 Q404.375,26.2969 404.375,26.6406 Q404.375,26.9844 404.0313,27.3906 Q403.5313,27.9688 402.7344,28.2969 Q401.6563,28.75 400.3594,28.75 Q398.8438,28.75 397.6406,28.125 Q396.6563,27.625 395.9688,26.5625 Q395.2813,25.4844 395.2813,24.2031 L395.2813,23.0469 Q395.2813,21.7188 395.8906,20.5781 Q396.5156,19.4219 397.6094,18.8125 Q398.7031,18.1875 399.9375,18.1875 Q400.6719,18.1875 401.3125,18.3594 Q401.9688,18.5156 402.5156,18.875 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="86" x="420.25" y="28.7285">VulkanDevice</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="886" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="50.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="27" y="57.5332">bool m_EnableValidationLayer = true;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="67.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="315" x="27" y="75.1426">const VkAllocationCallbacks *p_Allocator = nullptr;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="85.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="27" y="92.752">VkPhysicalDevice m_GPU = VK_NULL_HANDLE;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="103.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="267" x="27" y="110.3613">VkDevice m_Device = VK_NULL_HANDLE;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="120.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="340" x="27" y="127.9707">QueueFamilyIndices *p_QueueFamilyIndices = nullptr;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="138.3516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="345" x="27" y="145.5801">const uint32_t *p_UniqueQueueFamilyIndices = nullptr;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="155.9609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="27" y="163.1895">uint32_t m_UniqueQueueFamilyIndexCount = 0;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="173.5703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="184" x="27" y="180.7988">Queues *p_Queues = nullptr;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="191.1797"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="27" y="198.4082">VkCommandPool m_TransferCmdPool = VK_NULL_HANDLE;</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="216.0176">&#160;</text><ellipse cx="18" cy="229.3984" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="27" y="233.627">std::vector&lt;std::string&gt; m_SupportedExtensions = {};</text><ellipse cx="18" cy="247.0078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="27" y="251.2363">std::vector&lt;std::string&gt; m_EnabledExtensions = {};</text><ellipse cx="18" cy="264.6172" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="27" y="268.8457">std::vector&lt;std::string&gt; m_SupportedLayers = {};</text><ellipse cx="18" cy="282.2266" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="27" y="286.4551">std::vector&lt;std::string&gt; m_EnabledLayers = {};</text><ellipse cx="18" cy="299.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="307" x="27" y="304.0645">VkPhysicalDeviceProperties m_GPUProperties{};</text><ellipse cx="18" cy="317.4453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="383" x="27" y="321.6738">VkPhysicalDeviceDriverProperties m_GPUDriverProperties{};</text><ellipse cx="18" cy="335.0547" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="27" y="339.2832">VkPhysicalDeviceFeatures m_GPUFeatures{};</text><ellipse cx="18" cy="352.6641" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="433" x="27" y="356.8926">std::vector&lt;VkQueueFamilyProperties&gt; m_QueueFamilyProperties{};</text><line style="stroke:#181818;stroke-width:0.5;" x1="8" x2="886" y1="363.9688" y2="363.9688"/><ellipse cx="18" cy="378.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="629" x="27" y="382.502">explicit VulkanDevice(bool enableValidationLayer, const VkAllocationCallbacks *pAllocator = nullptr);</text><ellipse cx="18" cy="395.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="108" x="27" y="400.1113">~VulkanDevice();</text><ellipse cx="18" cy="413.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="27" y="417.7207">VulkanDevice(const VulkanDevice &amp;) = delete;</text><ellipse cx="18" cy="431.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="27" y="435.3301">VulkanDevice(VulkanDevice &amp;&amp;) = delete;</text><ellipse cx="18" cy="448.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="367" x="27" y="452.9395">VulkanDevice &amp;operator=(const VulkanDevice &amp;) = delete;</text><ellipse cx="18" cy="466.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="27" y="470.5488">VulkanDevice &amp;operator=(VulkanDevice &amp;&amp;) = delete;</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="4" x="27" y="488.1582">&#160;</text><ellipse cx="18" cy="545.5625" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="226" x="27" y="505.7676">void InitDevice(VkInstance instance,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="107" y="523.377">VkSurfaceKHR surface,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="107" y="540.9863">QueueTypeFlags queueType,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="193" x="107" y="558.5957">QueueFamilyIndices *pIndices,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="237" x="107" y="576.2051">std::vector&lt;uint32_t&gt; &amp;uniqueIndices,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="126" x="107" y="593.8145">Queues *pQueues);</text><ellipse cx="18" cy="616" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="425" x="27" y="611.4238">VkCommandPool CreateCommandPool(uint32_t queueFamilyIndex,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="678" x="171" y="629.0332">VkCommandPoolCreateFlags flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT);</text><ellipse cx="18" cy="642.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="854" x="27" y="646.6426">void AllocateCommandBuffers(VkCommandPool pool, VkCommandBufferLevel level, uint32_t bufferCount, VkCommandBuffer *pBuffer);</text><ellipse cx="18" cy="695.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="233" x="27" y="664.252">void CreateBuffer(VkDeviceSize size,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="176" x="115" y="681.8613">VkBufferUsageFlags usage,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="115" y="699.4707">VkMemoryPropertyFlags properties,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="115" y="717.0801">VulkanBuffer *pBuffer,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="115" y="734.6895">const void *data = nullptr);</text><ellipse cx="18" cy="748.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="733" x="27" y="752.2988">VkCommandBuffer CreateCommandBuffer(VkCommandBufferLevel level, VkCommandPool pool, bool begin = false);</text><ellipse cx="18" cy="765.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="586" x="27" y="769.9082">VkCommandBuffer CreateCommandBuffer(VkCommandBufferLevel level, bool begin = false);</text><ellipse cx="18" cy="783.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="765" x="27" y="787.5176">void FlushCommandBuffer(VkCommandBuffer commandBuffer, VkQueue queue, VkCommandPool pool, bool free = true);</text><ellipse cx="18" cy="800.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="618" x="27" y="805.127">void FlushCommandBuffer(VkCommandBuffer commandBuffer, VkQueue queue, bool free = true);</text><ellipse cx="18" cy="818.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="678" x="27" y="822.7363">void CopyBuffer(VulkanBuffer *src, VulkanBuffer *dst, VkQueue queue, VkBufferCopy *copyRegin = nullptr);</text><ellipse cx="18" cy="836.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="567" x="27" y="840.3457">void CopyBuffer(VulkanBuffer *src, VulkanBuffer *dst, VkBufferCopy *copyRegin = nullptr);</text><ellipse cx="18" cy="906.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="27" y="857.9551">void CopyBufferToImage(VulkanBuffer *src,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="135" y="875.5645">VulkanTexture *dst,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="135" y="893.1738">VkQueue queue,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="135" y="910.7832">uint32_t width,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="135" y="928.3926">uint32_t height,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="135" y="946.002">uint32_t copyReginCount = 0,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="135" y="963.6113">VkBufferImageCopy *pCopyRegins = nullptr);</text><ellipse cx="18" cy="1021.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="27" y="981.2207">void CopyBufferToImage(VulkanBuffer *src,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="123" x="135" y="998.8301">VulkanTexture *dst,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="135" y="1016.4395">uint32_t width,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="135" y="1034.0488">uint32_t height,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="135" y="1051.6582">uint32_t copyReginCount = 0,</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="135" y="1069.2676">VkBufferImageCopy *pCopyRegins = nullptr);</text><ellipse cx="18" cy="1082.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="406" x="27" y="1086.877">inline const VkPhysicalDevice GetGPU() const { return m_GPU; }</text><ellipse cx="18" cy="1100.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="27" y="1104.4863">inline VkPhysicalDevice GetGPU() { return m_GPU; }</text><ellipse cx="18" cy="1117.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="27" y="1122.0957">inline const VkDevice GetDevice() const { return m_Device; }</text><ellipse cx="18" cy="1135.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="27" y="1139.7051">inline VkDevice GetDevice() { return m_Device; }</text><ellipse cx="18" cy="1179.5" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="492" x="27" y="1157.3145">inline const QueueFamilyIndices *const GetDeviceQueueFamilyIndices() const</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="5" x="43" y="1174.9238">{</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="190" x="59" y="1192.5332">return p_QueueFamilyIndices;</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="5" x="43" y="1210.1426">}</text><ellipse cx="18" cy="1249.9375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="27" y="1227.752">inline const Queues *const GetDeviceQueues() const</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="5" x="43" y="1245.3613">{</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="59" y="1262.9707">return p_Queues;</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="5" x="43" y="1280.5801">}</text><ellipse cx="18" cy="1293.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="324" x="27" y="1298.1895">void DestroyCommandPool(VkCommandPool pool);</text><ellipse cx="18" cy="1311.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="181" x="27" y="1315.7988">void DestroyLogicalDevice();</text><ellipse cx="18" cy="1329.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="365" x="27" y="1333.4082">bool ExtensionSupport(const std::string &amp;extensionName);</text><ellipse cx="18" cy="1346.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="311" x="27" y="1351.0176">bool LayerSupport(const std::string &amp;layerName);</text></g></g></svg>